# coding: utf-8
test=3
test=test+1
import nltk
from nltk.corpus import movie_reviews
all_words = nltk.FreqDist(word for word in movie_reviews.words())
len(all_words)
all_words.most_common(2000)
test=all_words.most_common(2000)
test
len(test)
word_vector=list(test)
word_vector
word_vector,freq_vector=zip(*test)
word_vector
def extract_features(vector, filename):
    temp={}
    word_in_file=set(movie_reviews.words(filename))
    word_in_file = [word.lower() for word in word_in_file]
    for word in vector:
        temp[word]=word in word_in_file
    return temp
movie_reivew.fileids(0
)
movie_reivew.fileids(0
)
movie_reviews.fileids()
feature
get_ipython().magic(u'ls ')
locals()
globals()
get_ipython().magic(u'whos ')
extract_features(word_vector,'neg/cv999_14636.txt')
total_set = [(extract_features(vector,fileid),category) for category in movie_reviews.categories() for fileid in movie_reviews.fileids(category)]
total_set = [(extract_features(word_vector,fileid),category) for category in movie_reviews.categories() for fileid in movie_reviews.fileids(category)]
len(total_set)
trial_set=total_set[0:500]
test_set = total_set[501:]
import random
random.shuffle(total_set)
test_set = total_set[501:]
trial_set=total_set[0:500]
classifier = nltk.NaiveBayesClassifier.train(trial_set)
classifier.classify(test_set[0])
test_set[0]
classifier.classify(test_set[0][0])
classifier.classify(test_set[1][0])
test_set[1][1]
nltk.classify.accuracy(test_set)
get_ipython().magic(u'pinfo nltk.classify.accuracy')
nltk.classify.accuracy(classifier, test_set)
get_ipython().magic(u'ls ')
get_ipython().magic(u'save')
get_ipython().magic(u'save current_session ~0/')
